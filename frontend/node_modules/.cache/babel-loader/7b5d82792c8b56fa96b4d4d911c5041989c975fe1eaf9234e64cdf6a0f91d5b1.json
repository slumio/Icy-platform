{"ast":null,"code":"import axios from 'axios';\n\n// The base URL for your backend API, configured for different environments.\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\n * Triggers the backend process to discover and analyze influencers for a given campaign.\n * This function sends a request to the backend, which then performs the heavy lifting\n * of finding and scoring influencers based on the campaign's brand profile.\n *\n * @param {string} campaignId - The unique identifier of the campaign to run discovery for.\n * @returns {Promise<object>} A promise that resolves to the API response, typically a confirmation message.\n * @throws {Error} Throws an error if the API call fails, allowing the UI to handle the error state.\n */\nexport const runDiscovery = async campaignId => {\n  if (!campaignId) {\n    throw new Error(\"A Campaign ID is required to run discovery.\");\n  }\n  try {\n    // Make a POST request to the discovery endpoint. The backend uses the campaignId\n    // to find the relevant brand profile and criteria for its search.\n    const response = await axios.post(`${API_BASE_URL}/campaigns/${campaignId}/discover`);\n    console.log('Discovery process initiated successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    // Provide a detailed error message for easier debugging.\n    console.error(`Error initiating discovery for campaign ${campaignId}:`, ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","runDiscovery","campaignId","Error","response","post","console","log","data","error","_error$response","message"],"sources":["/home/slumio/icy-platform/frontend/src/api/discoveryApi.js"],"sourcesContent":["import axios from 'axios';\n\n// The base URL for your backend API, configured for different environments.\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\n * Triggers the backend process to discover and analyze influencers for a given campaign.\n * This function sends a request to the backend, which then performs the heavy lifting\n * of finding and scoring influencers based on the campaign's brand profile.\n *\n * @param {string} campaignId - The unique identifier of the campaign to run discovery for.\n * @returns {Promise<object>} A promise that resolves to the API response, typically a confirmation message.\n * @throws {Error} Throws an error if the API call fails, allowing the UI to handle the error state.\n */\nexport const runDiscovery = async (campaignId) => {\n  if (!campaignId) {\n    throw new Error(\"A Campaign ID is required to run discovery.\");\n  }\n  try {\n    // Make a POST request to the discovery endpoint. The backend uses the campaignId\n    // to find the relevant brand profile and criteria for its search.\n    const response = await axios.post(`${API_BASE_URL}/campaigns/${campaignId}/discover`);\n    console.log('Discovery process initiated successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    // Provide a detailed error message for easier debugging.\n    console.error(`Error initiating discovery for campaign ${campaignId}:`, error.response?.data || error.message);\n    throw error;\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,UAAU,IAAK;EAChD,IAAI,CAACA,UAAU,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,IAAI;IACF;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGR,YAAY,cAAcK,UAAU,WAAW,CAAC;IACrFI,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAEH,QAAQ,CAACI,IAAI,CAAC;IACvE,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd;IACAJ,OAAO,CAACG,KAAK,CAAC,2CAA2CP,UAAU,GAAG,EAAE,EAAAQ,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACE,OAAO,CAAC;IAC9G,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}