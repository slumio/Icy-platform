{"ast":null,"code":"import axios from 'axios';\n\n// Get the backend API URL from the environment variables.\n// This makes it easy to switch between development and production URLs.\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\n * Creates a new campaign by sending campaign data to the backend.\n *\n * @param {object} campaignData - The campaign data from the setup form.\n * @returns {Promise<object>} A promise that resolves to the newly created campaign's data, including its ID.\n * @throws {Error} Throws an error if the API call fails.\n */\nexport const createCampaign = async campaignData => {\n  try {\n    // Make a POST request to the /campaigns endpoint.\n    const response = await axios.post(`${API_BASE_URL}/campaigns`, campaignData);\n    console.log('Campaign created successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    // Log the error for debugging purposes and re-throw it\n    // so the calling component can handle it (e.g., show a UI notification).\n    console.error(\"Error creating campaign:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw error;\n  }\n};\n\n/**\n * Fetches the details of a specific campaign from the backend.\n *\n * @param {string} campaignId - The unique identifier for the campaign.\n * @returns {Promise<object>} A promise that resolves to the campaign's detailed data.\n * @throws {Error} Throws an error if the API call fails.\n */\nexport const getCampaign = async campaignId => {\n  if (!campaignId) {\n    throw new Error(\"Campaign ID is required.\");\n  }\n  try {\n    // Make a GET request to the /campaigns/{campaignId} endpoint.\n    const response = await axios.get(`${API_BASE_URL}/campaigns/${campaignId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error(`Error fetching campaign with ID ${campaignId}:`, ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","createCampaign","campaignData","response","post","console","log","data","error","_error$response","message","getCampaign","campaignId","Error","get","_error$response2"],"sources":["/home/slumio/icy-platform/frontend/src/api/campaignsApi.js"],"sourcesContent":["import axios from 'axios';\n\n// Get the backend API URL from the environment variables.\n// This makes it easy to switch between development and production URLs.\nconst API_BASE_URL = process.env.REACT_APP_API_URL;\n\n/**\n * Creates a new campaign by sending campaign data to the backend.\n *\n * @param {object} campaignData - The campaign data from the setup form.\n * @returns {Promise<object>} A promise that resolves to the newly created campaign's data, including its ID.\n * @throws {Error} Throws an error if the API call fails.\n */\nexport const createCampaign = async (campaignData) => {\n  try {\n    // Make a POST request to the /campaigns endpoint.\n    const response = await axios.post(`${API_BASE_URL}/campaigns`, campaignData);\n    console.log('Campaign created successfully:', response.data);\n    return response.data;\n  } catch (error) {\n    // Log the error for debugging purposes and re-throw it\n    // so the calling component can handle it (e.g., show a UI notification).\n    console.error(\"Error creating campaign:\", error.response?.data || error.message);\n    throw error;\n  }\n};\n\n/**\n * Fetches the details of a specific campaign from the backend.\n *\n * @param {string} campaignId - The unique identifier for the campaign.\n * @returns {Promise<object>} A promise that resolves to the campaign's detailed data.\n * @throws {Error} Throws an error if the API call fails.\n */\nexport const getCampaign = async (campaignId) => {\n  if (!campaignId) {\n    throw new Error(\"Campaign ID is required.\");\n  }\n  try {\n    // Make a GET request to the /campaigns/{campaignId} endpoint.\n    const response = await axios.get(`${API_BASE_URL}/campaigns/${campaignId}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching campaign with ID ${campaignId}:`, error.response?.data || error.message);\n    throw error;\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGP,YAAY,YAAY,EAAEK,YAAY,CAAC;IAC5EG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAC5D,OAAOJ,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,eAAA;IACd;IACA;IACAJ,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACL,QAAQ,cAAAM,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAIC,KAAK,CAACE,OAAO,CAAC;IAChF,MAAMF,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOC,UAAU,IAAK;EAC/C,IAAI,CAACA,UAAU,EAAE;IACf,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EACA,IAAI;IACF;IACA,MAAMV,QAAQ,GAAG,MAAMP,KAAK,CAACkB,GAAG,CAAC,GAAGjB,YAAY,cAAce,UAAU,EAAE,CAAC;IAC3E,OAAOT,QAAQ,CAACI,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAO,gBAAA;IACdV,OAAO,CAACG,KAAK,CAAC,mCAAmCI,UAAU,GAAG,EAAE,EAAAG,gBAAA,GAAAP,KAAK,CAACL,QAAQ,cAAAY,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,KAAIC,KAAK,CAACE,OAAO,CAAC;IACtG,MAAMF,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}